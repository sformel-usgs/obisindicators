
R version 4.1.2 (2021-11-01) -- "Bird Hippie"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-suse-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> #ES50 calculated for United STates on USGS HPC Denali
> #Based off original code from Abby Benson: use_gbif_parquet_file.rmd
> 
> #obis indicators still in development, installed on 2022-10-26
> #remotes::install_local("marinebon/obisindicators")
> 
> library(obisindicators)
Fri Nov  4 10:28:50 2022: [unset]:_pmi_alps_init:alps_get_placement_info returned with error -1
Fri Nov  4 10:28:50 2022: [unset]:_pmi_init:_pmi_alps_init returned -1
Warning message:
replacing previous import 'h3::compact' by 'purrr::compact' when loading 'obisindicators' 
> library(dplyr)

Attaching package: 'dplyr'

The following objects are masked from 'package:stats':

    filter, lag

The following objects are masked from 'package:base':

    intersect, setdiff, setequal, union

> library(sf)
Linking to GEOS 3.8.1, GDAL 3.4.2, PROJ 6.2.1; sf_use_s2() is TRUE
> library(arrow)
Some features are not enabled in this build of Arrow. Run `arrow_info()` for more information.

Attaching package: 'arrow'

The following object is masked from 'package:utils':

    timestamp

> library(magick)
Linking to ImageMagick 7.0.10.60
Enabled features: fontconfig, freetype, lcms, pango, x11
Disabled features: cairo, fftw, ghostscript, heic, raw, rsvg, webp
Using 80 threads
> library(ggplot2)
> library(dggridR)
Loading required package: rlang

Attaching package: 'rlang'

The following object is masked from 'package:arrow':

    string

Loading required package: sp
> 
> # get GBIF records
> parquet_path <- "s3://gbif-open-data-us-east-1/occurrence/2022-07-01/occurrence.parquet"
> occ <- arrow::open_dataset(parquet_path)
> 
> # In OBIS it's date_year and it's calculated for all records I believe, I'm not
> # sure if the same is true for year in GBIF- how do we check?
> 
> begin <- Sys.time()
> occ_all <- occ %>%
+   filter(countrycode == "BW",
+          kingdom == "Animalia",
+          !is.na(decimallongitude)) %>% 
+   group_by(decimallongitude, 
+            decimallatitude, 
+            species, 
+            year) %>%  # remove duplicate rows
+   filter(!is.na(species))  %>%
+   summarize(records = n(),
+             .groups = "drop") %>%
+   collect()
> 
> end <- Sys.time()
> 
> #Print runtime
> end - begin
Time difference of 9.071046 mins
> 
> #Create list of queries by decade
> decades <- seq(from = 1960, to = 2020, by = 10) %>% 
+   as.list()
> 
> occ_by_decade <- lapply(decades, function(x) {
+   occ_all %>%
+     filter(year >= x,
+            year <= x + 9)
+ })
> 
> 
> ## Below is from ddgridr. SHould we translate to h3?
> # Create function to make grid, calculate metrics for different resolution grid sizes
> 
> res_changes <- function(occur, resolution = 9) {
+   dggs <-
+     dgconstruct(projection = "ISEA",
+                 topology = "HEXAGON",
+                 res = resolution)
+   occur$cell <-
+     dgGEO_to_SEQNUM(dggs, occur$decimallongitude, occur$decimallatitude)[["seqnum"]]
+   idx <- calc_indicators(occur)
+   
+   grid <- dgcellstogrid(dggs, idx$cell) %>%
+     st_wrap_dateline() %>%
+     rename(cell = seqnum) %>%
+     left_join(idx,
+               by = "cell")
+   return(grid)
+ }
> 
> ## plot stuff
> grid_list <- lapply(occ_by_decade, res_changes, resolution = 6)
> 
> names(grid_list) <- as.character(c(decades))
> 
> #There are some explicit arguments in hear that are needed for the HPC but aren't needed on most personal computers.
> 
> lapply(names(grid_list), function(x) {
+   gmap_indicator(grid_list[[x]], "es", label = "ES(50)") %>%
+     ggsave(plot = .,
+            filename = paste0("/home/sformel/ES50_gbif/images/map_gbif_es_TEST_", x, ".png"),
+            width = 4,
+            height = 4,
+            units = "in",
+            scale = 1,
+            device = "png")
+ })
[[1]]
[1] "/home/sformel/ES50_gbif/images/map_gbif_es_TEST_1960.png"

[[2]]
[1] "/home/sformel/ES50_gbif/images/map_gbif_es_TEST_1970.png"

[[3]]
[1] "/home/sformel/ES50_gbif/images/map_gbif_es_TEST_1980.png"

[[4]]
[1] "/home/sformel/ES50_gbif/images/map_gbif_es_TEST_1990.png"

[[5]]
[1] "/home/sformel/ES50_gbif/images/map_gbif_es_TEST_2000.png"

[[6]]
[1] "/home/sformel/ES50_gbif/images/map_gbif_es_TEST_2010.png"

[[7]]
[1] "/home/sformel/ES50_gbif/images/map_gbif_es_TEST_2020.png"

> 
> ## create animated gif
> decade_images <- list.files(path = "ES50_gbif/images", pattern = "*.png", full.names = TRUE)
> img <- lapply(decade_images, image_read) %>% 
+   image_join()
> 
> image_append(image_scale(img, "x200"))
# A tibble: 1 x 7
  format width height colorspace matte filesize density
  <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>  
1 ""         0      0 sRGB       FALSE        0 +0x+0  
> 
> gbif_es50_gif <- image_animate(image_scale(img, "1200x1200"), fps = 1, dispose = "previous") 
> image_write(gbif_es50_gif, "/home/sformel/ES50_gbif/images/gbif_es50_animated_TEST.gif")
Warning message:
In image_write(gbif_es50_gif, "/home/sformel/ES50_gbif/images/gbif_es50_animated_TEST.gif") :
  Writing image with 0 frames
> 
> proc.time()
   user  system elapsed 
312.225  63.346 585.320 
Error: ignoring SIGPIPE signal
Execution halted
